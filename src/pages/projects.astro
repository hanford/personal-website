---
import Layout from '../layouts/Layout.astro';
import Article from '../components/Article.astro';
import Card from '../components/Card.astro';

export const prerender = true;

const now = new Date();

// Optional: format for America/Detroit (your local time)
const detroitFmt = new Intl.DateTimeFormat('en-US', {
  year: 'numeric', month: '2-digit', day: '2-digit',
  hour: '2-digit', minute: '2-digit', second: '2-digit',
  hour12: false
});

const regeneratedAtLocal = detroitFmt.format(now);

interface GitHubRepo {
  id: number;
  name: string;
  description: string | null;
  stargazers_count: number;
  language: string | null;
  html_url: string;
  fork: boolean;
}

// Fetch repositories from GitHub API
const username = 'hanford';
// Adjust this value to show repos with different minimum star counts
// Set to 0 to show all repos, or higher numbers like 10, 50, 100 for more selective filtering
const minStars = 5; // Only show repos with at least 5 stars

// Function to fetch all repositories using pagination
async function fetchAllRepos(username: string): Promise<GitHubRepo[]> {
  const allRepos: GitHubRepo[] = [];
  let page = 1;
  const perPage = 100;
  
  while (true) {
    const response = await fetch(
      `https://api.github.com/users/${username}/repos?sort=stargazers&direction=desc&per_page=${perPage}&page=${page}`
    );
    
    if (!response.ok) {
      console.error(`Failed to fetch repos page ${page}:`, response.status);
      break;
    }
    
    const repos: GitHubRepo[] = await response.json();
    
    // If we get fewer repos than perPage, we've reached the end
    if (repos.length < perPage) {
      allRepos.push(...repos);
      break;
    }
    
    allRepos.push(...repos);
    page++;
  }
  
  return allRepos;
}

const repos: GitHubRepo[] = await fetchAllRepos(username)
  .then((data: GitHubRepo[]) => {
    // Filter out forks and repos with fewer than minStars
    return data
      .filter((repo: GitHubRepo) => !repo.fork && repo.stargazers_count >= minStars)
      .sort((a: GitHubRepo, b: GitHubRepo) => b.stargazers_count - a.stargazers_count);
  })
  .catch(error => {
    console.error('Error fetching repos:', error);
    return [];
  });
---

<Layout title="Projects | Jack Hanford">
  <a href={import.meta.env.BASE_URL} class="back-button">
    ‚Üê Back
  </a>

  <Card>
    <h1 class="title">Projects</h1>

    <p>
      Lately I've been obssessed with open source software which I keep
      on{" "}
      <a
        class="anchor"
        href="https://github.com/hanford"
        target="_blank"
      >
        GitHub
      </a>
      . I've been writing JavaScript professionally for around 4 years,
      and have become an expert with some of the latest and greatest
      frontend frameworks including{" "}
      <a
        class="anchor"
        href="https://www.npmjs.com/package/virtual-dom"
        target="_blank"
      >
        virtual-dom
      </a>
      ,{" "}
      <a class="anchor" href="https://angular.io" target="_blank">
        AngularJS
      </a>
      ,{" "}
      <a
        class="anchor"
        href="https://facebook.github.io/react"
        target="_blank"
      >
        ReactJS
      </a>{" "}
      and most recently{" "}
      <a
        class="anchor"
        href="https://github.com/zeit/next.js"
        target="_blank"
      >
        Next.js
      </a>
      .
    </p>

    {repos.map((repo) => (
      <Article
        path={repo.html_url}
        name={repo.name}
        about={repo.description || 'No description available'}
        stars={repo.stargazers_count.toString()}
        language={repo.language || undefined}
        isExternal={true}
      />
    ))}

    <p><strong>Generated:</strong> {regeneratedAtLocal}</p>
  </Card>

  <style>
    .container {
      width: 100%;
      display: flex;
      justify-content: center;
      position: relative;
      justify-content: center;
      flex-direction: column;
      font-size: 1.6rem;
    }
    
    .title {
      margin: 0 0 2rem 0;
      font-size: 2rem;
      line-height: 2rem;
      letter-spacing: 0.03em;
      font-weight: bold;
    }

    .back-button {
      text-decoration: none;
      color: black;
      font-weight: 600;
      padding: 1rem 2rem;
      border-radius: 0.4rem;
      margin: 1rem;
      margin-top: 1rem;
      display: inline-block;
      position: fixed;
      top: 1rem;
      z-index: 2;
      backdrop-filter: blur(20px);
      background-color: transparent;
    }

    @media (max-width: 767px) {
      .back-button {
        margin: 0rem;
        margin-left: 1rem;
      }
    }

    .anchor {
      color: #d40052;
      font-weight: 600;
      text-decoration: underline;
    }

    p {
      margin-bottom: 2rem;
      line-height: 1.6;
    }

    @media (prefers-color-scheme: dark) {
      .anchor {
        color: white;
      }
    }
  </style>
</Layout>
